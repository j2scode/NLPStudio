% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Document.R
\docType{class}
\name{Document}
\alias{Document}
\title{Document}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
Document
}
\arguments{
\item{content}{A character vector or list containing text content for objects. Required for write methods.}

\item{desc}{Character string containing the description of the document.}

\item{fileName}{Character string cointaining the file name for a document.  Required for objects of Document class.}

\item{name}{Character string indicating the name of the document. Required for all objects}

\item{parent}{An object of the DocumentCollection class that represents the parent object. Required for input / output methods.}

\item{purge}{Logical indicating whether the removeDocument method should purge the document from the current environment. The default is FALSE}
}
\description{
\code{Document} Class for instantiating,returning and printing individual
Document objects within objects of the DocumentCollection class.
}
\details{
\strong{Document Class Overview:}

The Document class is component part of the Document0 composite class. This
pattern is documented in the book "Design Patterns: Elements of Reusable
Object-Oriented Software" by Erich Gamma, Richard Helm, Ralph Johnson
and John Vlissides (hence Gang of Four). This pattern allows composite
and individual objects to be treated uniformly.

\strong{Document Core Methods:}
The core methods are as follows:
\itemize{
 \item{\code{new(name, fileName, desc)}}{Instantiates an object of the Document class. }
 \item{\code{getDocument()}}{Returns the object and its meta data.}
 \item{\code{accept(visitor)}}{Accepts a visitor and dispatches the visitor, passing 'self' as a parameter}
 \item{\code{addContent(content)}}{Method for adding content to an object of the Document class.}
 \item{\code{removeContent()}}{Method for removing content from an object of the Document class.}
}
\strong{Document Composite Methods:}
The composite methods are not implemented for the Document class.
\itemize{
 \item{\code{addDocument(document)}}{Not implemented for the Document class.}
 \item{\code{getDocuments()}}{Not implemented for the Document class.}
 \item{\code{removeDocument(document)}}{Not implemented for the Document class.}
 \item{\code{getAncestor()}}{Returns the parent object.}
 \item{\code{setAncestor(parent)}}{Sets the parent object.}
}

#' \strong{Document I/O Methods:}
The following input/output methods are implemented for the Document class.
\itemize{
 \item{\code{readDocument(format)}}{Reads the document in the format designated in the format parameter.}
 \item{\code{writeDocument(format, content)}}{Writes the content to file in the format designated in the format parameter. }
}
}
\seealso{
Other Document classes: \code{\link{Document0}},
  \code{\link{DocumentCollection}}
}
\author{
John James, \email{jjames@datasciencesalon.org}
}
\keyword{datasets}
