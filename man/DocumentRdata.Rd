% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DocumentRdata.R
\docType{class}
\name{DocumentRdata}
\alias{DocumentRdata}
\title{DocumentRdata}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
DocumentRdata
}
\arguments{
\item{name}{Character string indicating the name of the document or file. Required for all objects.}

\item{desc}{Character string containing the description of the document.}

\item{content}{Nested list of content to be written to files.}

\item{fileName}{Character string indicating File object's file name.}

\item{parent}{An object of the Lab or DocumentCollection class that represents
the parent object.}

\item{visitor}{An object of one of the visitor classes.}

\item{stateId}{Character string that uniquely identifies an object and its
state at a specific point in time.}
}
\description{
\code{DocumentRdata} Class for instantiating, reading, and writing objects
of the DocumentRdata class..
}
\details{
\strong{Document Family of Classes Overview:}

The Document family of classes is an implementation of the composite
pattern documented in the book "Design Patterns: Elements of Reusable
Object-Oriented Software" by Erich Gamma, Richard Helm, Ralph Johnson
and John Vlissides (hence Gang of Four). This pattern allows composite
and individual objects to be treated uniformly.

The following sections include:
\itemize{
 \item Class Participants: Classes the comprise this composite pattern.
 \item Class Collaborators: Classes which interact with the Document0 class.
 \item Class Methods: Methods included in the interface.
 }

\strong{Document Family of Classes Participants:}
The participants of the Document0 class are:
\itemize{
 \item Document0: This component class specifies an abstract interface
 for all leaf and composite document classes.
 \item DocumentCollection: The composite class that maintains the
 hierarchical structure of document collections (composites) and individual
 documents (leafs).
 \item Document: This "abstract leaf" class specifies the concrete class for
 individual documents.
 \item DocumentText: This "concrete leaf" class for text documents.
 \item DocumentCsv: This "concrete leaf" class for csv documents.
 \item DocumentRdata: This "concrete leaf" class for RData documents.
 \item DocumentXlsx: This "concrete leaf" class for excel documents.
 }

\strong{DocumentRdata Collaborators:}
The collaborators of the Document family  are:
 \itemize{
  \item State: Class responsible for saving current and restoring prior states of objects.
  \item Curator: Class responsible for maintaining the object hierarchy.
  \item Historian: Class responsible for maintaining the history of events on objects.
  \item Reader: Class responsible for initiating the document read operation.
  \item Writer: Class responsible for initiating the document write operation.
  \item VReader: Visitor class responsible for performing read operations through the Document hierarchy.
  \item VWriter: Visitor class responsible for performing write operations through the Document hierarchy.
  \item VCurator: Visitor class that fulfills commands from the Curator class.
 }

\strong{DocumentRdata Methods:}
There are six types of methods within the Document class and they are:
\itemize{
 \item{Core Methods: Core methods shared by both Document and
 DocumentCollection objects.}
 \item{Getter/Setter Methods: Active binding methods for getting and setting
 selected private members.}
 \item{Composite Methods: Methods implemented by the DocumentCollection
 class to maintain the document heirarchy.}
 \item{State Methods: Methods for saving current and restoring to prior object states.}
 \item{Visitor Methods: Methods for implementation of and messaging
 with objects of the visitor classes.}
}

\strong{Document Core Methods:}
 \itemize{
  \item{\code{new(name, desc)}}{Method for instantiating a document}
  \item{\code{getName()}}{Method for returning the name of the current document.}
  \item{\code{restore(object)}}{Method for restoring an object to a prior state, as per the object parameter.}
  \item{\code{addContent(content)}}{Method for adding content to the document object. This method is invoked by the read visitor.}
 }

\strong{Document Field Getter/Setter Active Binding Methods:}
 \itemize{
  \item{\code{desc()}}{Method used to get / set the description variable.
  Implemented as an active binding and so the field may be updated
  by assignment. This method is inherited from the Document0 class.}
}

\strong{Document Composite Methods:}
 \itemize{
  \item{\code{addChild(document)}}{Not implemented for this class.}
  \item{\code{getChildren()}}{Returns NULL.}
  \item{\code{removeChild(document)}}{Not implemented for this class.}
  \item{\code{parent(value)}}{Getter/setter method for the parent field, implemented as an active binding on the private member.}
}

\strong{Document State Methods:}
 \itemize{
  \item{\code{saveState()}}{Method that initiates the process of saving the current state of the object. This method is inherited from the Document0 class.}
  \item{\code{restoreState()}}{Method that initiates the process of restoring an object to a prior state. This method is inherited from the Document0 class.}
 }

\strong{Document Visitor Methods:}
 \itemize{
  \item{\code{accept(visitor)}}{Method for accepting the visitor objects.}
 }
}
\seealso{
Other Document classes: \code{\link{Document0}},
  \code{\link{DocumentCollection}},
  \code{\link{DocumentCsv}}, \code{\link{DocumentText}},
  \code{\link{DocumentXlsx}}, \code{\link{Document}}
}
\author{
John James, \email{jjames@datasciencesalon.org}
}
\keyword{datasets}
