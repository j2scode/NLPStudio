% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NLPStudio.R
\docType{class}
\name{NLPStudio}
\alias{NLPStudio}
\title{NLPStudio}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
NLPStudio
}
\arguments{
\item{lab}{An object of class 'Lab'.}

\item{stateId}{Character string indicating the stateId which uniquely identifies a serialized object at prior state.}
}
\description{
\code{NLPStudio} Class the creates and manages labs.
}
\details{
This class creates and manages data labs  A data lab is essentially a
directory in which project data reside.  Multiple data labs can be created
to house separate versions of the data for analysis. Note: This class is a
singleton pattern. An NLPStudio object called nlpStudio is instantiated at
load time.  Any subsequent initializations will return the single nlpStudio
instance. There are two sets of methods.  The first set enables clients to
retrieve information about the NLPStudio object.  The second set allows
clients to add, remove, enter, and leave labs.

\strong{NLPStudio Core Methods:}
\describe{
 \item{\code{new()}}{Initializes the NLPStudio. This is a singleton class in which its only object is created when the package is loaded. The object instantiated at package load time is called "nlpStudio".}
 \item{\code{getInstance()}}{Returns the current NLPStudio instance object. This will be the only instantiation called "nlpStudio.},
 \item{\code{getName()}}{Returns the name of the current NLPStudio object.}
 \item{\code{exposeObject(requester)}}{Returns the current object elements in list format if invoked by ah authorized requester.}
 \item{\code{restore(requester, prior)}}{Restores the object to a prior state of invoked by an authorized requester.}
}

\strong{NLPSTudio Lab Methods:}
\describe{
 \item{\code{getChildren()}}{Returns the list of member labs in the nlpStudio object.}
 \item{\code{addChild(lab, enter = TRUE)}}{Adds an existing lab to the NLPStudio object list of labs.  If enter is set to TRUE, the currentLab and currentLabName variables are updated accordingly.}
 \item{\code{removeChild(lab, purge = FALSE)}}{Method which archives and removes the lab from the nlpStudio objectd. If purge is set to TRUE, the lab is removed from memory, disk, and state.}
 \item{\code{parent(value)}}{Getter/setter method for the parent field, implemented as an active binding on the private member.}
}

\strong{NLPSTudio State Methods:}
\describe{
 \item{\code{saveState()}}{Method for saving the current state of an NLPObject and its descendants.}
 \item{\code{restoreState()}}{Method for restoring an NLPStudio object to a prior state as designated by a state id.}
}

\strong{NLPSTudio Visitor Methods:}
 \itemize{
  \item{\code{accept(visitor)}}{Method for accepting the visitor objects. Subclasses override these methods.}
 }
}
\examples{
\dontrun{
nlpStudio$exposeObject() # Returns nlpStudio object and meta data in list format
Lab$new(name = "List", desc = "Lisa Simpon's lab")
Lab$new(name = "Bart", desc = "Bart Simpon's lab")
nlpStudio$addChild(Lisa, enter = FALSE) # Adds lab without setting it current.
nlpStudio$addChild(Bart, enter = TRUE) # Adds lab and sets it current.
nlpStudio$removeChild("Bart") # Success!
nlpStudio$getChildren()
}

}
\author{
John James, \email{jjames@datasciencesalon.org}
}
\keyword{datasets}
