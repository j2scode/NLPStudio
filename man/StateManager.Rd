% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/StateManager.R
\docType{class}
\name{StateManager}
\alias{StateManager}
\title{StateManager}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
StateManager
}
\arguments{
\item{object}{The object to be loaded or saved. Required parameter for the saveState method.}

\item{stateId}{The unique identifier for the object and state. Required parameter for the restoreState method.}

\item{files}{statesical indicating whether the files associated with an object should be archived.}
}
\value{
object The object to be returned from restoreState or the object passed to saveState.
}
\description{
\code{StateManager} Class for managing persistence and states of objects
within the NLPStudio package.
}
\details{
\strong{StateManager Class Overview:}
The StateManager class object provides overall management of object state
within the NLPStudio package. It accepts a save or restore request from
a client object, statess the request, dispatches the appropriate StateManager
(and, if requested, StateArchiver) object(s). Once the request is fulfilled
by the subclass(es), the object is returned to the StateManager.  The
StateManager adds the object with a designated stateId to its inventory
of states. A summary of the request is also stored for query and
restore purposes.

\strong{State Class Family  Overview:}
The State family of classes is responsible for managing object persistence
and an archive / restore capability within the NLPStudio objects.

\strong(State Class Family Participants:)
The participants of the family are as follows:
\itemize{
 \item StateManager: This class accepts save / restore requests from object
 methods, statess the request and dispatches requests to the StateManager, and,
 if the client requests that files be saved or restored, the StateArchiver
 class.
 \item StateManager: This class is responsible for saving and restoring
 objects from and to existing objects.
 \item StateArchiver: This class is responsible for archiving and
 restoring any files associated with an object being saved or restored.
 }
}
\section{Methods}{

The methods for the StateManager class are as follows:
\describe{
 \item{\code{getState(stateId)}}{Returns the object at the state designated by the stateId parameter.}
 \item{\code{restoreState(stateId, files = FALSE)}}{Restores the object at the state designated by the stateId parameter to the global environment. If files is set TRUE, previously archived directories and files are restored. If the object is part of a composite, e.g. Document or DocumentCollection class object, and its parent does not exist, the files will be restored to an orphan object according to the class of the object, the files will be restored to the orphan object directory, and the parent will be changed accordingly. In this case the restored object may then be moved to another parent as required.}
 \item{\code{saveState(object, files = FALSE)}}{Saves the current state of an object and dispatches a StateManager object to save the state to disk. If the files parameter is set to true, a VisitorArchive object will be instantiated to compress and save the  files associated with the object to an archive directory.}
}
}

\seealso{
Other State Classes: \code{\link{StateRestore0}},
  \code{\link{StateRestoreFile}},
  \code{\link{StateRestoreObject}},
  \code{\link{StateSave0}}, \code{\link{StateSaveFile}},
  \code{\link{StateSaveObject}}, \code{\link{State}}
}
\author{
John James, \email{jjames@datasciencesalon.org}
}
\keyword{datasets}
